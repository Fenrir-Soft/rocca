---
import { cidade_repository } from "../../api/cidades";
import ModalDialog from "./ModalDialog.astro";
const cidades = await cidade_repository.getAll();
let max = 17;
for (let cidade of cidades) {
    for (let zona of cidade.zonas) {
        zona.bairros.sort((a, b) => {
          if (a.Bairro.length > max || b.Bairro.length > max) {
            
                if (a.Bairro.length > b.Bairro.length) {
                    return 1;
                } else {
                    return -1;
                }
            }
            return a.slug < b.slug ? -1 : 1;
        });
    }
}
---

<ModalDialog id="dialog-bairros">
    <div class="header relaway">
        <div>
            <h3>ONDE</h3>
            <!--
        <input type="text" placeholder="Filtrar por nome" />
        -->
        </div>
        <select name="cidade">
            {
                cidades.map((cidade) => (
                    <option value={cidade.slug}>{cidade.Cidade}</option>
                ))
            }
        </select>
    </div>
    {
        cidades.map((cidade) => (
            <Fragment>
                {cidade.zonas.map((zona) => (
                    <ul class="categorias" data-cidade={cidade.slug}>
                        <li>
                            <label>
                                <input
                                    type="checkbox"
                                    name="zona[]"
                                    class="select-all"
                                    value={zona.slug}
                                    id={`zona-${zona.slug}`}
                                />
                                {cidade.Cidade} - {zona.titulo}
                            </label>
                            <ul class="categorias">
                                {zona.bairros.map((bairro) => (
                                    <li>
                                        <label>
                                            <input
                                                type="checkbox"
                                                name="bairro[]"
                                                value={bairro.slug}
                                                id={`bairro-${bairro.slug}`}
                                            />
                                            {bairro.Bairro}
                                        </label>
                                    </li>
                                ))}
                            </ul>
                        </li>
                    </ul>
                ))}

                <ul class="categorias">
                    {cidade.zonas.length === 0 && (
                        <li data-cidade={cidade.slug}>
                            <label>
                                <input
                                    type="checkbox"
                                    name="cidade[]"
                                    class="select-all"
                                    value={cidade.slug}
                                    id={`cidade-${cidade.slug}`}
                                />
                                {cidade.Cidade}
                            </label>
                            <ul class="categorias">
                                {cidade.bairros.map((bairro) => (
                                    <li>
                                        <label>
                                            <input
                                                type="checkbox"
                                                name="bairro[]"
                                                value={bairro.slug}
                                                id={`bairro-${bairro.slug}`}
                                            />
                                            {bairro.Bairro}
                                        </label>
                                    </li>
                                ))}
                            </ul>
                        </li>
                    )}
                </ul>
            </Fragment>
        ))
    }

    <Fragment slot={"footer"}>
        <div>
            <a href="#" role="button" class="raleway btn-limpar">Limpar</a>
        </div>
        <div>
            <a href="#" role="button" class="raleway btn-primary btn-aplicar"
                >Aplicar</a
            >
        </div>
        <div>
            <a role="button">&nbsp;</a>
        </div>
    </Fragment>
</ModalDialog>

<style lang="less" scoped>
    .header {
        display: flex;
        justify-content: space-between;
        padding-bottom: 1.5em;
        div {
            display: flex;
            align-items: center;
            justify-content: space-between;
            h3 {
                margin: 0;
                padding: 0;
                color: dimgray;
                font-weight: 600;
            }
            input {
                padding: 1.25em 0.75em;
                width: 60%;
                background-color: #efefef;
                border: none;
                border-radius: 0.25em;
                color: #626262;
                font-weight: 500;
                outline: none;
                &::placeholder {
                    color: inherit;
                    font-weight: inherit;
                }
            }
        }
        select {
            background-color: dimgray;
            color: white;
            padding: 1.25em 0.75em;
            min-width: 25%;
            outline: none;
            border-radius: 0.25em;
        }
    }

    @media (max-width: 24em) {
        .header {
            flex-direction: column;
            padding-bottom: 1em;
            div {
                flex-direction: column;
                align-items: flex-start;
                h3 {
                    margin-bottom: 0.25em;
                }
                input {
                    width: 100%;
                    margin-bottom: 1em;
                }
            }
        }
    }

    ul.categorias {
        display: grid;
        width: 55em;
        @media (max-width: 55em) {
            width: 100%;
        }
        grid-template-columns: repeat(auto-fit, minmax(12em, 1fr));
        grid-gap: 0.5rem 0.5rem;
        list-style: none;
        margin: 0;
        padding: 0;
        font-size: 0.9em;

        li {
            label {
                display: flex;
                align-items: center;
                padding: 0.35em;
                &:first-child {
                    font-weight: 500;
                    background-color: dimgray;
                    color: white;
                    gap: 0.5em;
                    border-radius: 0.2em;
                }
            }

            ul {
                li {
                    label {
                        &:first-child {
                            background-color: unset;
                            color: unset;
                            font-weight: unset;
                        }
                    }
                }
                margin-bottom: 1em;
            }
        }
    }

    [name="cidade"] {
        border-right: 1em solid transparent;
        cursor: pointer;
    }
    .hidden[data-cidade] {
        display: none;
    }
</style>
<script>
    const dialog = document.querySelector("#dialog-bairros");
    if (dialog) {
        const btn_limpar = dialog.querySelector(".btn-limpar");
        const btn_aplicar = dialog.querySelector(".btn-aplicar");
        const select_cidade: HTMLSelectElement | null =
            dialog.querySelector("[name=cidade]");

        if (btn_limpar) {
            btn_limpar.addEventListener("click", (e) => {
                e.preventDefault();
                e.stopPropagation();
                const inputs: HTMLInputElement[] = Array.from(
                    dialog.querySelectorAll("[type=checkbox]")
                );
                for (let input of inputs) {
                    input.checked = false;
                }
            });
        }

        const showHideCidade = () => {
            if (!select_cidade) {
                return;
            }
            let rows = Array.from(dialog.querySelectorAll("[data-cidade]"));
            for (let row of rows) {
                row.classList.add("hidden");
            }
            const slug = select_cidade.value;
            rows = Array.from(dialog.querySelectorAll(`[data-cidade=${slug}]`));
            for (let row of rows) {
                row.classList.remove("hidden");
            }
        };

        if (select_cidade) {
            select_cidade.addEventListener("click", showHideCidade);
            showHideCidade();
        }

        const select_all: HTMLInputElement[] = Array.from(
            dialog.querySelectorAll(".select-all")
        );
        for (let el of select_all) {
            el.addEventListener("change", () => {
                const parent = el.closest("ul");
                if (!parent) {
                    return;
                }
                const inputs: HTMLInputElement[] = Array.from(
                    parent.querySelectorAll(".categorias [type=checkbox]")
                );
                for (let input of inputs) {
                    if (el.checked) {
                        input.checked = true;
                    } else {
                        input.checked = false;
                    }
                }
            });
        }
    }
</script>
